# adapted from :
# - newrelic basic setup https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/collector/opentelemetry-collector-basic/
# - new relic collector for host monitoring https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/collector/opentelemetry-collector-infra-hosts
# - prometheus receiver for opentelemetry https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver

receivers:
  # collect prometheus metrics exposed in Kraken
  prometheus:
    config:
      scrape_configs:
        - job_name: "kraken-prometheus2otel-collector"
          scrape_interval: 20s
          static_configs:
            - targets: ["${KRAKEN_PROMETHEUS_HTTP_ADDRESS}"]

processors:
  memory_limiter:
    check_interval: 1s
    limit_mib: 200
    spike_limit_mib: 200
  batch:
  # transform metrics to the "delta-encoding" which is supported by newrelic
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/cumulativetodeltaprocessor
  # https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/best-practices/opentelemetry-best-practices-metrics#otel-histogram
  cumulativetodelta:
  # collect informations about the host we are running on
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor#amazon-ecs
  resourcedetection/ecs:
    detectors: [env, ecs]
  # add extra attributes to the metrics collected
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/attributesprocessor/README.md#attributes-processor
  # NewRelic expects the keys to be prefixed with 'tags.'
  # https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/best-practices/opentelemetry-best-practices-resources
  attributes:
    actions:
      - key: tags.component
        value: kraken
        action: insert
      - key: tags.availability_zone
        from_attribute: cloud.availability_zone
        action: insert
      - key: tags.task
        from_attribute: aws.ecs.task.arn
        action: insert
      - key: tags.task_revision
        from_attribute: aws.ecs.task.revision
        action: insert
      - key: tags.cluster
        from_attribute: aws.ecs.cluster.arn
        action: insert
      - key: coverage
        value: ${KRAKEN_GENERAL_instance_name}
        action: insert
      # https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/collector/opentelemetry-collector-infra-hosts#host-receiver
      - key: host.id
        from_attribute: host.name
        action: upsert


exporters:
  otlp:
    # endpoint should include gRPC port number, e.g: https://otlp.nr-data.net:4317
    # see https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/opentelemetry-setup#review-settings
    endpoint: ${TARGET_OTLP_ENDPOINT}
    headers:
      api-key: ${TARGET_OTLP_LICENSE_KEY}

service:
  pipelines:
    metrics:
      receivers: [prometheus]
      # NewRelic does not accept cumulative histogram (yet?) and that is what is produced by prometheus receiver
      # so we need to transform the cumulative histogram to a delta one
      # see https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/best-practices/opentelemetry-best-practices-metrics#otel-histogram
      processors: [batch, resourcedetection/ecs, attributes, cumulativetodelta]
      exporters: [otlp]
  telemetry:
    logs: # https://github.com/open-telemetry/opentelemetry-collector/blob/7666eb04c30e5cfd750db9969fe507562598f0ae/config/service.go#L41-L97
      level: ERROR
      encoding: json
    metrics: # https://github.com/open-telemetry/opentelemetry-collector/blob/7666eb04c30e5cfd750db9969fe507562598f0ae/config/service.go#L99-L111
      level: none  # no own-telemetry
